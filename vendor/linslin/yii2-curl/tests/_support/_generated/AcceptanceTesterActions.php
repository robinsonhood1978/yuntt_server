<?php  //[STAMP] cd097b21cd42b05db2fee563f9ee2b21
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait AcceptanceTesterActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ModuleException
     * @see \Codeception\Module\Phiremock::takeConnection()
     */
    public function takeConnection($name): \Codeception\Module\Phiremock {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('takeConnection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::expectARequestToRemoteServiceWithAResponse()
     */
    public function expectARequestToRemoteServiceWithAResponse($expectation): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('expectARequestToRemoteServiceWithAResponse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::haveACleanSetupInRemoteService()
     */
    public function haveACleanSetupInRemoteService(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveACleanSetupInRemoteService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::dontExpectRequestsInRemoteService()
     */
    public function dontExpectRequestsInRemoteService(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontExpectRequestsInRemoteService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::haveCleanScenariosInRemoteService()
     */
    public function haveCleanScenariosInRemoteService(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('haveCleanScenariosInRemoteService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @deprecated Name is confusing, sounds like an assertion
     * @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::didNotReceiveRequestsInRemoteService()
     */
    public function didNotReceiveRequestsInRemoteService(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('didNotReceiveRequestsInRemoteService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::dontHaveLoggedRequestsToRemoteService()
     */
    public function dontHaveLoggedRequestsToRemoteService(): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('dontHaveLoggedRequestsToRemoteService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @throws ClientExceptionInterface
     * @throws Exception
     * @see \Codeception\Module\Phiremock::seeRemoteServiceReceived()
     */
    public function seeRemoteServiceReceived($times, $builder): void {
        $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeRemoteServiceReceived', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * @throws ClientExceptionInterface
     * @throws Exception
     * @see \Codeception\Module\Phiremock::seeRemoteServiceReceived()
     */
    public function canSeeRemoteServiceReceived($times, $builder): void {
        $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeRemoteServiceReceived', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::grabRequestsMadeToRemoteService()
     */
    public function grabRequestsMadeToRemoteService($builder): array {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('grabRequestsMadeToRemoteService', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     @throws ClientExceptionInterface
     * @see \Codeception\Module\Phiremock::setScenarioState()
     */
    public function setScenarioState($name, $state): void {
        $this->getScenario()->runStep(new \Codeception\Step\Action('setScenarioState', func_get_args()));
    }
}
